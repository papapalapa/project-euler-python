"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

class Problem2:
    def fibonacci1(self, term):
        # If number is 1, 
        if term is 1:
            return 1
        elif term is 2:
            return 2
        else:
            return self.fibonacci1(term - 1) + self.fibonacci1(term -2)

    def fibonacci2(self, term):
        terms = [1, 2]
        if term is 1:
            return 1
        elif term is 2:
            return 2
        else:
            for i in range(term - 2):
                if terms[0] > terms[1]:    
                    terms[1] = terms[0] + terms[1]
                else:
                    terms[0] = terms[0] + terms[1]
        return max(terms)

    def evenFibonacciSum(self, limit):
        terms = []
        sum = 0
        number = 1

        while number < limit:
            if number is 1 or number is 2:
                terms.append(number)
                number += 1
            else:
                position = len(terms)
                number = terms[position - 2] + terms[position - 1]
                if number < limit:
                    terms.append(number)

        for number in terms:
            if number % 2 == 0:
                sum += number

        return sum